{"version":3,"sources":["components/butterfly.jpg","components/Navbar.js","components/Jumbotron.js","components/ImageButton.js","components/ImageGrid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","href","id","guessMessage","score","topScore","Jumbotron","style","backgroundImage","Background","backgroundPosition","backgroundSize","backgroundRepeat","ImageButton","image","name","data-id","src","alt","width","height","shuffleArray","array","i","length","j","Math","floor","random","temp","alreadyClickedArr","ImageGrid","state","flowers","handleGoodGuess","setState","sendData","console","log","handleBadGuess","scoreData","scoreFromChild","topScoreFromChild","messageFromChild","callbackFromParent","handleGuess","indexOf","push","this","slice","map","flower","key","onClick","React","Component","App","myCallback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd3a3d6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/butterfly.53d2375e.jpg\";","import React from \"react\";\n\nfunction Navbar (props) {\n\n    return (\n        <div className=\"container-fluid\">\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark scoreBar centered\">\n                <a className=\"navbar-brand\" href=\"/\">Flower Flitting</a>\n                {/* <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button> */}\n                <div id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item\"> \n                            <a className=\"nav-link active\" href=\"/\">Guess: {(props.guessMessage ? props.guessMessage : \"Click any flower to start\")}</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link active\" href=\"/\">Score: {(props.score ? props.score : 0)} | Top Score: {(props.topScore ? props.topScore : 0)}</a>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    )\n\n}\n\nexport default Navbar;","import React from \"react\";\nimport Background from \"./butterfly.jpg\"\n\nfunction Jumbotron(){\n\n    const style = { \n        backgroundImage: `url(${Background})`,\n        backgroundPosition: 'center',\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat'\n      }\n\n    return (\n        <div className=\"jumbotron jumbotron-fluid\" style={style}>\n            <div className=\"container centered\">\n                <h1 className=\"display-4\">Be the Butterfly!</h1>\n                <p className=\"lead\">Click from flower to flower to get points. But don't click the same flower twice!</p>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Jumbotron;","import React from \"react\";\n\nfunction ImageButton(props) {\n\n    const { id, image, name } = props;\n\n    return (\n        <div className=\"click-item\" id={id} data-id={id}>\n            <img src={image} alt={name} width=\"150px\" height=\"150px\" />\n        </div>\n    );\n}\n\nexport default ImageButton;\n","import React from \"react\";\nimport ImageButton from \"./ImageButton\";\nimport flowers from \"../flower.json\";\n\n// random resort of items in array to change display order of flowers\nfunction shuffleArray(array) {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n  \nlet alreadyClickedArr = [];\n\nclass ImageGrid extends React.Component {\n\n    //set this.state.flowers to json array; score to 0\n    state = {\n        flowers,\n        score: 0,\n        guessMessage: \"\",\n        topScore: 0,\n    };\n\n    // increase score by 1, reshuffle ImageButtons, display good guess message\n    handleGoodGuess = () => {\n        this.setState({ \n            score: this.state.score + 1, \n            guessMessage: \"Good!\"\n        }, () => {\n            shuffleArray(flowers);\n            this.sendData();\n            console.log(\"score: \", this.state.score);\n            console.log(\"Guess: \", this.state.guessMessage);\n\n            if (this.state.score >= this.state.topScore) {\n                this.setState({ topScore: this.state.score}, () => {\n                    this.sendData();\n                    console.log(\"Top score: \", this.state.topScore);\n                });\n            };\n        });\n    };\n\n    // reset score to 0, display game over message\n    handleBadGuess = () => {\n        this.setState({ \n            score: 0,\n            guessMessage: \"Wrong! Game over!\",\n        }, () => {\n            alreadyClickedArr = [];\n            this.sendData();\n            console.log(\"score: \", this.state.score);\n            console.log(\"top score: \", this.state.topScore);\n            console.log(\"Guess: \", this.state.guessMessage);\n        });\n    };\n\n    //pass score info back to parent\n    sendData = () => {\n        const scoreData = {\n            scoreFromChild: this.state.score,\n            topScoreFromChild: this.state.topScore,\n            messageFromChild: this.state.guessMessage\n        }\n        this.props.callbackFromParent(scoreData);\n    };    \n\n    // determine whether guess is good or bad & run appropriate function\n    handleGuess = (id) => {\n        if (alreadyClickedArr.indexOf(id) === -1) {\n            this.handleGoodGuess();\n            alreadyClickedArr.push(id);\n            console.log(\"button id clicked: \", id);\n            console.log(\"already clicked: \", alreadyClickedArr);\n\n        } else {\n            this.handleBadGuess();\n            console.log(\"button id clicked: \", id);\n            console.log(\"already clicked: \", alreadyClickedArr);\n        };\n    };\n        \n    render() {\n        shuffleArray(flowers);\n\n        return (\n            <main className=\"container\">\n                <div className=\"row\">\n                    {this.state.flowers.slice(0, 12).map(flower => (\n                        <div className=\"col-lg-3 col-md-4 col-sm-6\" key={flower.id} onClick={() => this.handleGuess(flower.id)}>\n                            <ImageButton\n                                id={flower.id}\n                                name={flower.name}\n                                image={flower.image}\n                            />\n                        </div>\n                    ))}\n                </div>\n            </main>\n        );\n    };\n}\n\nexport default ImageGrid;","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport ImageGrid from \"./components/ImageGrid\";\nimport \"./styles.css\";\n\nclass App extends React.Component {\n\n  constructor(props) { \n    super(props);\n    this.state = {\n      scoreFromChild: null, \n      topScoreFromChild: null, \n      messageFromChild: null \n    };\n  };\n\n  myCallback = (scoreData) => {\n    this.setState({ \n      scoreFromChild: scoreData.scoreFromChild,\n      topScoreFromChild: scoreData.topScoreFromChild,\n      messageFromChild: scoreData.messageFromChild\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar \n          score={this.state.scoreFromChild}\n          topScore={this.state.topScoreFromChild}\n          guessMessage={this.state.messageFromChild}\n        />\n        <Jumbotron />\n        <ImageGrid callbackFromParent={this.myCallback}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}